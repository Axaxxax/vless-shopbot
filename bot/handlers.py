import logging
import uuid
from io import BytesIO
from datetime import datetime, timedelta
import qrcode
from yookassa import Payment
from aiogram import Bot, Dispatcher, F, types, html
from aiogram.filters import Command
from aiogram.types import BufferedInputFile

from . import keyboards
import modules.xui_api as xui_api
from data_manager.database import (
    get_user, add_new_key, get_user_keys, update_user_stats,
    register_user_if_not_exists, get_next_key_number, get_key_by_id, update_key_info
)
from config import (
    PLANS, CHOOSE_PLAN_MESSAGE, WELCOME_MESSAGE, 
    get_profile_text, get_vpn_active_text, VPN_INACTIVE_TEXT, VPN_NO_DATA_TEXT
)

TELEGRAM_BOT_USERNAME = None
logger = logging.getLogger(__name__)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å."""
    register_user_if_not_exists(message.from_user.id, message.from_user.username or message.from_user.full_name)
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n\n{WELCOME_MESSAGE}",
        reply_markup=keyboards.main_keyboard
    )
    await profile_handler(message)

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user_db_data = get_user(user_id)
    user_keys = get_user_keys(user_id)
    
    if not user_db_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.")
        return

    username = html.bold(user_db_data.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
    total_spent = user_db_data.get('total_spent', 0)
    total_months = user_db_data.get('total_months', 0)
    active_keys_count = sum(1 for key in user_keys if datetime.fromisoformat(key['expiry_date']) > datetime.now())
    vpn_status_text = f"üîë <b>–ö–ª—é—á–µ–π –∞–∫—Ç–∏–≤–Ω–æ:</b> {active_keys_count} –∏–∑ {len(user_keys)}"
    
    final_text = get_profile_text(username, total_spent, total_months, vpn_status_text)
    await message.answer(final_text)

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å VPN")
async def buy_or_extend_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏."""
    user_id = message.from_user.id
    user_keys = get_user_keys(user_id)

    await message.answer(
        "–í–∞—à–∏ –∫–ª—é—á–∏:",
        reply_markup=keyboards.create_keys_management_keyboard(user_keys)
    )

@dp.callback_query(F.data.startswith("show_key_"))
async def show_key_handler(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∫–ª—é—á –∏ QR-–∫–æ–¥."""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ...")
    try:
        key_id_to_show = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞.", show_alert=True)
        return
        
    user_id = callback.from_user.id
    
    key_data = get_key_by_id(key_id_to_show)

    if not key_data or key_data['user_id'] != user_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return

    try:
        api, target_inbound = xui_api.login()
        if not api or not target_inbound:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏.")
            return

        user_uuid = key_data['xui_client_uuid']
        email = key_data['key_email']
        
        connection_string = xui_api.get_connection_string(target_inbound, user_uuid, email)
        if not connection_string:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
            return

        qr_img = qrcode.make(connection_string)
        bio = BytesIO(); qr_img.save(bio, "PNG"); bio.seek(0)
        qr_code_file = BufferedInputFile(bio.read(), filename="vpn_qr.png")
        
        expiry_date = datetime.fromisoformat(key_data['expiry_date'])
        caption = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ {expiry_date.strftime('%d.%m.%Y %H:%M')})"

        await callback.message.answer_photo(
            photo=qr_code_file,
            caption=caption
        )
        await callback.message.answer(f"–í–∞—à –∫–ª—é—á: {html.code(connection_string)}")
        
    except Exception as e:
        logger.error(f"Error showing key {key_id_to_show} for user {user_id}: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞.")


@dp.callback_query(F.data == "buy_new_key")
async def buy_new_key_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:",
        reply_markup=keyboards.create_plans_keyboard(PLANS, action="new")
    )

@dp.callback_query(F.data.startswith("extend_key_"))
async def extend_key_handler(callback: types.CallbackQuery):
    key_id_to_extend = int(callback.data.split("_")[2])
    await callback.answer()
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞:",
        reply_markup=keyboards.create_plans_keyboard(PLANS, action="extend", key_id=key_id_to_extend)
    )

@dp.callback_query(F.data.startswith("buy_") & F.data.contains("_month"))
async def create_payment_handler(callback: types.CallbackQuery):
    await callback.answer("–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    parts = callback.data.split("_")
    plan_id = "_".join(parts[:-2]) 
    action = parts[-2]
    key_id = int(parts[-1])
    if plan_id not in PLANS:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞.")
        return
    name, price_rub, months = PLANS[plan_id]
    user_id = callback.from_user.id
    try:
        payment = Payment.create({
            "amount": {"value": price_rub, "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": f"https://t.me/{TELEGRAM_BOT_USERNAME}"},
            "capture": True, "description": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ NNVPN ({name})",
            "metadata": {"user_id": user_id, "months": months, "price": price_rub, "action": action, "key_id": key_id}
        }, uuid.uuid4())
        await callback.message.edit_text(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=keyboards.create_payment_keyboard(payment.confirmation.confirmation_url)
        )
    except Exception as e:
        logger.error(f"Failed to create YooKassa payment: {e}")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.")

async def process_successful_payment(bot: Bot, metadata: dict):
    user_id = int(metadata['user_id'])
    months = int(metadata['months'])
    price = float(metadata['price'])
    action = metadata['action']
    key_id = int(metadata['key_id'])
    
    await bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    try:
        api, target_inbound = xui_api.login()
        if not api or not target_inbound:
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return
        
        days_to_add = months * 30
        email = ""
        
        if action == "new":
            key_number = get_next_key_number(user_id)
            email = f"user{user_id}-key{key_number}@telegram.bot"
        elif action == "extend":
            key_data = get_key_by_id(key_id)
            if not key_data or key_data['user_id'] != user_id:
                await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                return
            email = key_data['key_email']
        
        user_uuid, new_expiry_timestamp = xui_api.update_or_create_client(api, target_inbound, email, days_to_add)
        if not user_uuid:
            await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏.")
            return

        if action == "new":
            add_new_key(user_id, user_uuid, email, new_expiry_timestamp)
        elif action == "extend":
            update_key_info(key_id, user_uuid, new_expiry_timestamp)
            
        update_user_stats(user_id, price, months)
        
        connection_string = xui_api.get_connection_string(target_inbound, user_uuid, email)
        qr_img = qrcode.make(connection_string)
        bio = BytesIO(); qr_img.save(bio, "PNG"); bio.seek(0)
        qr_code_file = BufferedInputFile(bio.read(), filename="vpn_qr.png")
        await bot.send_photo(user_id, photo=qr_code_file, caption="üéâ –í–∞—à VPN –∫–ª—é—á –≥–æ—Ç–æ–≤/–æ–±–Ω–æ–≤–ª–µ–Ω!")
        await bot.send_message(user_id, f"–í–∞—à –∫–ª—é—á: {html.code(connection_string)}")

    except Exception as e:
        logger.error(f"Error processing payment for user {user_id}: {e}", exc_info=True)
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")